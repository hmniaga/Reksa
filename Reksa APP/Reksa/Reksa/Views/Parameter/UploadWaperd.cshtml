
@model Reksa.ViewModels.ParameterListViewModel

@{
    ViewData["Title"] = "Upload Waperd";
}

<div class="row">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="m-t-0 header-title">
                <a>Upload Waperd</a>
            </h4>
        </div>
        <div class="panel-body">
            <div class="col-md-12">
                <div class="card-box">
                    <div class="row">
                        <!-- Begin Button -->
                        <div>
                            <div class="input-group">
                                <button id=btnProcess class="btn btn-info waves-effect waves-light" style="margin-right:10px">
                                    <span class="btn-label">
                                        <i class="fa fa-cogs"></i>
                                    </span>
                                    Process
                                </button>
                            </div>
                        </div>
                        <!-- End Button -->
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="card-box">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="col-sm-2 control-label">File Name</label>
                                <div class="input-group col-md-6" id="filename">
                                    <input id="txtbPath" type="file" accept=".csv, .xls, .xlsx" class="filestyle" data-iconname="fa fa-upload">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div id="dataGridView1"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div><script>
    $(document).ready(function () {

        var grid = {
            height: 200
        };
        $("#dataGridView1").kendoGrid(grid);


        $("#btnProcess").click(function () {
            var selectedId = 0;
            var grid = $("#dataGridView1").data("kendoGrid");
            grid.refresh();
            grid.tbody.find("tr[role='row']").each(function () {
                selectedId = selectedId + 1;                
            })
            
            if (selectedId == 0)
            {
                swal("Warning", "Silahkan memilih File yang akan diupload", "warning");
            }
            else
            {
                swal({
                    title: "Apakah yakin akan melakukan upload data ?",
                    text: "",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonClass: 'btn-info',
                    confirmButtonText: "Yes",
                    closeOnConfirm: true
                },
                    function () {
                        var grid = $("#dataGridView1").data("kendoGrid");
                        var listWaperd;
                        listWaperd = grid.dataSource.view();
                        
                        var model = JSON.stringify({ 'listWaperd': listWaperd });
                        $.ajax({
                            type: 'POST',
                            url: '/Parameter/SaveUploadWAPERD',
                            data: model,
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                if (data.blnResult) {
                                    swal("Success", "Upload Data Berhasil", "success");
                                }
                                else {
                                    swal("Warning", data.ErrMsg, "warning");
                                }
                            }
                        });
                    });
            }
        });
    });

    var X = XLSX;
    var process_wb = (function () {
        var to_json = function to_json(workbook) {
            var data = [];
            workbook.SheetNames.forEach(function (y) {
                var worksheet = workbook.Sheets[y];
                var headers = {};
                for (z in worksheet) {
                    if (z[0] === '!') continue;
                    //parse out the column, row, and value
                    var tt = 0;
                    for (var i = 0; i < z.length; i++) {
                        if (!isNaN(z[i])) {
                            tt = i;
                            break;
                        }
                    };
                    var col = z.substring(0, tt);
                    var row = parseInt(z.substring(tt));
                    var value = worksheet[z].v;

                    //store header names
                    if (row == 1 && value) {
                        headers[col] = value;
                        continue;
                    }

                    if (!data[row]) data[row] = {};
                    data[row][headers[col]] = value;
                }
                //drop those first two rows which are empty
                data.shift();
                data.shift();
                //console.log(data);
            });
            return data;
        };
        return function process_wb(wb) {
            var result = to_json(wb);
            if (result.length == 0) {
                swal("Warning", "No Data Result!!", "warning");
                $("#dataGridView1").empty();
            }
            else {
                populateGrid(result);
            }
        };
    })();

    var do_file = (function () {
        return function do_file(files) {
            var f = files[0];
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = e.target.result;
                data = new Uint8Array(data);
                process_wb(X.read(data, { type: 'array' }));
            };
            reader.readAsArrayBuffer(f);
        };
    })();


    (function () {
        var xlf = document.getElementById('filename');
        if (!xlf.addEventListener) return;
        function handleFile(e) { do_file(e.target.files); }
        xlf.addEventListener('change', handleFile, false);
    })();

    // add the grid options here
    function populateGrid(response) {
        var columns = generateColumns(response);
        var gridOptions = {
            dataSource: {
                transport: {
                    read: function (options) {
                        options.success(response);
                    }
                },
                pageSize: 10,
                page: 1
            },
            columns: columns,
            pageable: true,
            selectable: true,
            height: 400
        };
        // reuse the same grid, swapping its options as needed
        var grid = $("#dataGridView1").data("kendoGrid");
        if (grid) {
            grid.setOptions(gridOptions);
            grid.select("tr:eq(0)");
        } else {
            $("#dgvData").kendoGrid(gridOptions);
        }
    }

    function generateColumns(response) {
        var columnNames = Object.keys(response[0]);
        return columnNames.map(function (name) {
            return {
                field: name,
                width: 200,
                title: name
            };
        })
    }

</script>
